/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class lpsolve_LpSolve */

#ifndef _Included_lpsolve_LpSolve
#define _Included_lpsolve_LpSolve
#ifdef __cplusplus
extern "C" {
#endif
#undef lpsolve_LpSolve_FALSE
#define lpsolve_LpSolve_FALSE 0L
#undef lpsolve_LpSolve_TRUE
#define lpsolve_LpSolve_TRUE 1L
#undef lpsolve_LpSolve_AUTOMATIC
#define lpsolve_LpSolve_AUTOMATIC 2L
#undef lpsolve_LpSolve_DYNAMIC
#define lpsolve_LpSolve_DYNAMIC 4L
#undef lpsolve_LpSolve_FR
#define lpsolve_LpSolve_FR 0L
#undef lpsolve_LpSolve_LE
#define lpsolve_LpSolve_LE 1L
#undef lpsolve_LpSolve_GE
#define lpsolve_LpSolve_GE 2L
#undef lpsolve_LpSolve_EQ
#define lpsolve_LpSolve_EQ 3L
#undef lpsolve_LpSolve_OF
#define lpsolve_LpSolve_OF 4L
#undef lpsolve_LpSolve_SIMPLEX_PRIMAL_PRIMAL
#define lpsolve_LpSolve_SIMPLEX_PRIMAL_PRIMAL 5L
#undef lpsolve_LpSolve_SIMPLEX_DUAL_PRIMAL
#define lpsolve_LpSolve_SIMPLEX_DUAL_PRIMAL 6L
#undef lpsolve_LpSolve_SIMPLEX_PRIMAL_DUAL
#define lpsolve_LpSolve_SIMPLEX_PRIMAL_DUAL 9L
#undef lpsolve_LpSolve_SIMPLEX_DUAL_DUAL
#define lpsolve_LpSolve_SIMPLEX_DUAL_DUAL 10L
#undef lpsolve_LpSolve_SIMPLEX_DEFAULT
#define lpsolve_LpSolve_SIMPLEX_DEFAULT 6L
#undef lpsolve_LpSolve_PRESOLVE_NONE
#define lpsolve_LpSolve_PRESOLVE_NONE 0L
#undef lpsolve_LpSolve_PRESOLVE_ROWS
#define lpsolve_LpSolve_PRESOLVE_ROWS 1L
#undef lpsolve_LpSolve_PRESOLVE_COLS
#define lpsolve_LpSolve_PRESOLVE_COLS 2L
#undef lpsolve_LpSolve_PRESOLVE_LINDEP
#define lpsolve_LpSolve_PRESOLVE_LINDEP 4L
#undef lpsolve_LpSolve_PRESOLVE_SOS
#define lpsolve_LpSolve_PRESOLVE_SOS 32L
#undef lpsolve_LpSolve_PRESOLVE_REDUCEMIP
#define lpsolve_LpSolve_PRESOLVE_REDUCEMIP 64L
#undef lpsolve_LpSolve_PRESOLVE_KNAPSACK
#define lpsolve_LpSolve_PRESOLVE_KNAPSACK 128L
#undef lpsolve_LpSolve_PRESOLVE_ELIMEQ2
#define lpsolve_LpSolve_PRESOLVE_ELIMEQ2 256L
#undef lpsolve_LpSolve_PRESOLVE_IMPLIEDFREE
#define lpsolve_LpSolve_PRESOLVE_IMPLIEDFREE 512L
#undef lpsolve_LpSolve_PRESOLVE_REDUCEGCD
#define lpsolve_LpSolve_PRESOLVE_REDUCEGCD 1024L
#undef lpsolve_LpSolve_PRESOLVE_PROBEFIX
#define lpsolve_LpSolve_PRESOLVE_PROBEFIX 2048L
#undef lpsolve_LpSolve_PRESOLVE_PROBEREDUCE
#define lpsolve_LpSolve_PRESOLVE_PROBEREDUCE 4096L
#undef lpsolve_LpSolve_PRESOLVE_ROWDOMINATE
#define lpsolve_LpSolve_PRESOLVE_ROWDOMINATE 8192L
#undef lpsolve_LpSolve_PRESOLVE_COLDOMINATE
#define lpsolve_LpSolve_PRESOLVE_COLDOMINATE 16384L
#undef lpsolve_LpSolve_PRESOLVE_MERGEROWS
#define lpsolve_LpSolve_PRESOLVE_MERGEROWS 32768L
#undef lpsolve_LpSolve_PRESOLVE_IMPLIEDSLK
#define lpsolve_LpSolve_PRESOLVE_IMPLIEDSLK 65536L
#undef lpsolve_LpSolve_PRESOLVE_COLFIXDUAL
#define lpsolve_LpSolve_PRESOLVE_COLFIXDUAL 131072L
#undef lpsolve_LpSolve_PRESOLVE_BOUNDS
#define lpsolve_LpSolve_PRESOLVE_BOUNDS 262144L
#undef lpsolve_LpSolve_PRESOLVE_DUALS
#define lpsolve_LpSolve_PRESOLVE_DUALS 524288L
#undef lpsolve_LpSolve_PRESOLVE_SENSDUALS
#define lpsolve_LpSolve_PRESOLVE_SENSDUALS 1048576L
#undef lpsolve_LpSolve_CRASH_NOTHING
#define lpsolve_LpSolve_CRASH_NOTHING 0L
#undef lpsolve_LpSolve_CRASH_MOSTFEASIBLE
#define lpsolve_LpSolve_CRASH_MOSTFEASIBLE 2L
#undef lpsolve_LpSolve_ANTIDEGEN_NONE
#define lpsolve_LpSolve_ANTIDEGEN_NONE 0L
#undef lpsolve_LpSolve_ANTIDEGEN_FIXEDVARS
#define lpsolve_LpSolve_ANTIDEGEN_FIXEDVARS 1L
#undef lpsolve_LpSolve_ANTIDEGEN_COLUMNCHECK
#define lpsolve_LpSolve_ANTIDEGEN_COLUMNCHECK 2L
#undef lpsolve_LpSolve_ANTIDEGEN_STALLING
#define lpsolve_LpSolve_ANTIDEGEN_STALLING 4L
#undef lpsolve_LpSolve_ANTIDEGEN_NUMFAILURE
#define lpsolve_LpSolve_ANTIDEGEN_NUMFAILURE 8L
#undef lpsolve_LpSolve_ANTIDEGEN_LOSTFEAS
#define lpsolve_LpSolve_ANTIDEGEN_LOSTFEAS 16L
#undef lpsolve_LpSolve_ANTIDEGEN_INFEASIBLE
#define lpsolve_LpSolve_ANTIDEGEN_INFEASIBLE 32L
#undef lpsolve_LpSolve_ANTIDEGEN_DYNAMIC
#define lpsolve_LpSolve_ANTIDEGEN_DYNAMIC 64L
#undef lpsolve_LpSolve_ANTIDEGEN_DURINGBB
#define lpsolve_LpSolve_ANTIDEGEN_DURINGBB 128L
#undef lpsolve_LpSolve_ANTIDEGEN_RHSPERTURB
#define lpsolve_LpSolve_ANTIDEGEN_RHSPERTURB 256L
#undef lpsolve_LpSolve_ANTIDEGEN_BOUNDFLIP
#define lpsolve_LpSolve_ANTIDEGEN_BOUNDFLIP 512L
#undef lpsolve_LpSolve_NEUTRAL
#define lpsolve_LpSolve_NEUTRAL 0L
#undef lpsolve_LpSolve_CRITICAL
#define lpsolve_LpSolve_CRITICAL 1L
#undef lpsolve_LpSolve_SEVERE
#define lpsolve_LpSolve_SEVERE 2L
#undef lpsolve_LpSolve_IMPORTANT
#define lpsolve_LpSolve_IMPORTANT 3L
#undef lpsolve_LpSolve_NORMAL
#define lpsolve_LpSolve_NORMAL 4L
#undef lpsolve_LpSolve_DETAILED
#define lpsolve_LpSolve_DETAILED 5L
#undef lpsolve_LpSolve_FULL
#define lpsolve_LpSolve_FULL 6L
#undef lpsolve_LpSolve_MSG_NONE
#define lpsolve_LpSolve_MSG_NONE 0L
#undef lpsolve_LpSolve_MSG_PRESOLVE
#define lpsolve_LpSolve_MSG_PRESOLVE 1L
#undef lpsolve_LpSolve_MSG_ITERATION
#define lpsolve_LpSolve_MSG_ITERATION 2L
#undef lpsolve_LpSolve_MSG_INVERT
#define lpsolve_LpSolve_MSG_INVERT 4L
#undef lpsolve_LpSolve_MSG_LPFEASIBLE
#define lpsolve_LpSolve_MSG_LPFEASIBLE 8L
#undef lpsolve_LpSolve_MSG_LPOPTIMAL
#define lpsolve_LpSolve_MSG_LPOPTIMAL 16L
#undef lpsolve_LpSolve_MSG_LPEQUAL
#define lpsolve_LpSolve_MSG_LPEQUAL 32L
#undef lpsolve_LpSolve_MSG_LPBETTER
#define lpsolve_LpSolve_MSG_LPBETTER 64L
#undef lpsolve_LpSolve_MSG_MILPFEASIBLE
#define lpsolve_LpSolve_MSG_MILPFEASIBLE 128L
#undef lpsolve_LpSolve_MSG_MILPEQUAL
#define lpsolve_LpSolve_MSG_MILPEQUAL 256L
#undef lpsolve_LpSolve_MSG_MILPBETTER
#define lpsolve_LpSolve_MSG_MILPBETTER 512L
#undef lpsolve_LpSolve_MSG_MILPSTRATEGY
#define lpsolve_LpSolve_MSG_MILPSTRATEGY 1024L
#undef lpsolve_LpSolve_MSG_MILPOPTIMAL
#define lpsolve_LpSolve_MSG_MILPOPTIMAL 2048L
#undef lpsolve_LpSolve_MSG_PERFORMANCE
#define lpsolve_LpSolve_MSG_PERFORMANCE 4096L
#undef lpsolve_LpSolve_MSG_INITPSEUDOCOST
#define lpsolve_LpSolve_MSG_INITPSEUDOCOST 8192L
#undef lpsolve_LpSolve_IMPROVE_NONE
#define lpsolve_LpSolve_IMPROVE_NONE 0L
#undef lpsolve_LpSolve_IMPROVE_SOLUTION
#define lpsolve_LpSolve_IMPROVE_SOLUTION 1L
#undef lpsolve_LpSolve_IMPROVE_DUALFEAS
#define lpsolve_LpSolve_IMPROVE_DUALFEAS 2L
#undef lpsolve_LpSolve_IMPROVE_THETAGAP
#define lpsolve_LpSolve_IMPROVE_THETAGAP 4L
#undef lpsolve_LpSolve_IMPROVE_BBSIMPLEX
#define lpsolve_LpSolve_IMPROVE_BBSIMPLEX 8L
#undef lpsolve_LpSolve_SCALE_NONE
#define lpsolve_LpSolve_SCALE_NONE 0L
#undef lpsolve_LpSolve_SCALE_EXTREME
#define lpsolve_LpSolve_SCALE_EXTREME 1L
#undef lpsolve_LpSolve_SCALE_RANGE
#define lpsolve_LpSolve_SCALE_RANGE 2L
#undef lpsolve_LpSolve_SCALE_MEAN
#define lpsolve_LpSolve_SCALE_MEAN 3L
#undef lpsolve_LpSolve_SCALE_GEOMETRIC
#define lpsolve_LpSolve_SCALE_GEOMETRIC 4L
#undef lpsolve_LpSolve_SCALE_CURTISREID
#define lpsolve_LpSolve_SCALE_CURTISREID 7L
#undef lpsolve_LpSolve_SCALE_LINEAR
#define lpsolve_LpSolve_SCALE_LINEAR 0L
#undef lpsolve_LpSolve_SCALE_QUADRATIC
#define lpsolve_LpSolve_SCALE_QUADRATIC 8L
#undef lpsolve_LpSolve_SCALE_LOGARITHMIC
#define lpsolve_LpSolve_SCALE_LOGARITHMIC 16L
#undef lpsolve_LpSolve_SCALE_USERWEIGHT
#define lpsolve_LpSolve_SCALE_USERWEIGHT 31L
#undef lpsolve_LpSolve_SCALE_POWER2
#define lpsolve_LpSolve_SCALE_POWER2 32L
#undef lpsolve_LpSolve_SCALE_EQUILIBRATE
#define lpsolve_LpSolve_SCALE_EQUILIBRATE 64L
#undef lpsolve_LpSolve_SCALE_INTEGERS
#define lpsolve_LpSolve_SCALE_INTEGERS 128L
#undef lpsolve_LpSolve_SCALE_DYNUPDATE
#define lpsolve_LpSolve_SCALE_DYNUPDATE 256L
#undef lpsolve_LpSolve_SCALE_ROWSONLY
#define lpsolve_LpSolve_SCALE_ROWSONLY 512L
#undef lpsolve_LpSolve_SCALE_COLSONLY
#define lpsolve_LpSolve_SCALE_COLSONLY 1024L
#undef lpsolve_LpSolve_PRICER_FIRSTINDEX
#define lpsolve_LpSolve_PRICER_FIRSTINDEX 0L
#undef lpsolve_LpSolve_PRICER_DANTZIG
#define lpsolve_LpSolve_PRICER_DANTZIG 1L
#undef lpsolve_LpSolve_PRICER_DEVEX
#define lpsolve_LpSolve_PRICER_DEVEX 2L
#undef lpsolve_LpSolve_PRICER_STEEPESTEDGE
#define lpsolve_LpSolve_PRICER_STEEPESTEDGE 3L
#undef lpsolve_LpSolve_PRICE_METHODDEFAULT
#define lpsolve_LpSolve_PRICE_METHODDEFAULT 0L
#undef lpsolve_LpSolve_PRICE_PRIMALFALLBACK
#define lpsolve_LpSolve_PRICE_PRIMALFALLBACK 4L
#undef lpsolve_LpSolve_PRICE_MULTIPLE
#define lpsolve_LpSolve_PRICE_MULTIPLE 8L
#undef lpsolve_LpSolve_PRICE_PARTIAL
#define lpsolve_LpSolve_PRICE_PARTIAL 16L
#undef lpsolve_LpSolve_PRICE_ADAPTIVE
#define lpsolve_LpSolve_PRICE_ADAPTIVE 32L
#undef lpsolve_LpSolve_PRICE_HYBRID
#define lpsolve_LpSolve_PRICE_HYBRID 64L
#undef lpsolve_LpSolve_PRICE_RANDOMIZE
#define lpsolve_LpSolve_PRICE_RANDOMIZE 128L
#undef lpsolve_LpSolve_PRICE_AUTOPARTIAL
#define lpsolve_LpSolve_PRICE_AUTOPARTIAL 512L
#undef lpsolve_LpSolve_PRICE_LOOPLEFT
#define lpsolve_LpSolve_PRICE_LOOPLEFT 1024L
#undef lpsolve_LpSolve_PRICE_LOOPALTERNATE
#define lpsolve_LpSolve_PRICE_LOOPALTERNATE 2048L
#undef lpsolve_LpSolve_PRICE_HARRISTWOPASS
#define lpsolve_LpSolve_PRICE_HARRISTWOPASS 4096L
#undef lpsolve_LpSolve_PRICE_TRUENORMINIT
#define lpsolve_LpSolve_PRICE_TRUENORMINIT 16384L
#undef lpsolve_LpSolve_NODE_FIRSTSELECT
#define lpsolve_LpSolve_NODE_FIRSTSELECT 0L
#undef lpsolve_LpSolve_NODE_GAPSELECT
#define lpsolve_LpSolve_NODE_GAPSELECT 1L
#undef lpsolve_LpSolve_NODE_RANGESELECT
#define lpsolve_LpSolve_NODE_RANGESELECT 2L
#undef lpsolve_LpSolve_NODE_FRACTIONSELECT
#define lpsolve_LpSolve_NODE_FRACTIONSELECT 3L
#undef lpsolve_LpSolve_NODE_PSEUDOCOSTSELECT
#define lpsolve_LpSolve_NODE_PSEUDOCOSTSELECT 4L
#undef lpsolve_LpSolve_NODE_PSEUDONONINTSELECT
#define lpsolve_LpSolve_NODE_PSEUDONONINTSELECT 5L
#undef lpsolve_LpSolve_NODE_PSEUDORATIOSELECT
#define lpsolve_LpSolve_NODE_PSEUDORATIOSELECT 6L
#undef lpsolve_LpSolve_NODE_USERSELECT
#define lpsolve_LpSolve_NODE_USERSELECT 7L
#undef lpsolve_LpSolve_NODE_WEIGHTREVERSEMODE
#define lpsolve_LpSolve_NODE_WEIGHTREVERSEMODE 8L
#undef lpsolve_LpSolve_NODE_BRANCHREVERSEMODE
#define lpsolve_LpSolve_NODE_BRANCHREVERSEMODE 16L
#undef lpsolve_LpSolve_NODE_GREEDYMODE
#define lpsolve_LpSolve_NODE_GREEDYMODE 32L
#undef lpsolve_LpSolve_NODE_PSEUDOCOSTMODE
#define lpsolve_LpSolve_NODE_PSEUDOCOSTMODE 64L
#undef lpsolve_LpSolve_NODE_DEPTHFIRSTMODE
#define lpsolve_LpSolve_NODE_DEPTHFIRSTMODE 128L
#undef lpsolve_LpSolve_NODE_RANDOMIZEMODE
#define lpsolve_LpSolve_NODE_RANDOMIZEMODE 256L
#undef lpsolve_LpSolve_NODE_DYNAMICMODE
#define lpsolve_LpSolve_NODE_DYNAMICMODE 1024L
#undef lpsolve_LpSolve_NODE_RESTARTMODE
#define lpsolve_LpSolve_NODE_RESTARTMODE 2048L
#undef lpsolve_LpSolve_NODE_BREADTHFIRSTMODE
#define lpsolve_LpSolve_NODE_BREADTHFIRSTMODE 4096L
#undef lpsolve_LpSolve_NODE_AUTOORDER
#define lpsolve_LpSolve_NODE_AUTOORDER 8192L
#undef lpsolve_LpSolve_NODE_RCOSTFIXING
#define lpsolve_LpSolve_NODE_RCOSTFIXING 16384L
#undef lpsolve_LpSolve_NODE_STRONGINIT
#define lpsolve_LpSolve_NODE_STRONGINIT 32768L
#undef lpsolve_LpSolve_BRANCH_CEILING
#define lpsolve_LpSolve_BRANCH_CEILING 0L
#undef lpsolve_LpSolve_BRANCH_FLOOR
#define lpsolve_LpSolve_BRANCH_FLOOR 1L
#undef lpsolve_LpSolve_BRANCH_AUTOMATIC
#define lpsolve_LpSolve_BRANCH_AUTOMATIC 2L
#undef lpsolve_LpSolve_BRANCH_DEFAULT
#define lpsolve_LpSolve_BRANCH_DEFAULT 3L
#undef lpsolve_LpSolve_UNKNOWNERROR
#define lpsolve_LpSolve_UNKNOWNERROR -5L
#undef lpsolve_LpSolve_DATAIGNORED
#define lpsolve_LpSolve_DATAIGNORED -4L
#undef lpsolve_LpSolve_NOBFP
#define lpsolve_LpSolve_NOBFP -3L
#undef lpsolve_LpSolve_NOMEMORY
#define lpsolve_LpSolve_NOMEMORY -2L
#undef lpsolve_LpSolve_NOTRUN
#define lpsolve_LpSolve_NOTRUN -1L
#undef lpsolve_LpSolve_OPTIMAL
#define lpsolve_LpSolve_OPTIMAL 0L
#undef lpsolve_LpSolve_SUBOPTIMAL
#define lpsolve_LpSolve_SUBOPTIMAL 1L
#undef lpsolve_LpSolve_INFEASIBLE
#define lpsolve_LpSolve_INFEASIBLE 2L
#undef lpsolve_LpSolve_UNBOUNDED
#define lpsolve_LpSolve_UNBOUNDED 3L
#undef lpsolve_LpSolve_DEGENERATE
#define lpsolve_LpSolve_DEGENERATE 4L
#undef lpsolve_LpSolve_NUMFAILURE
#define lpsolve_LpSolve_NUMFAILURE 5L
#undef lpsolve_LpSolve_USERABORT
#define lpsolve_LpSolve_USERABORT 6L
#undef lpsolve_LpSolve_TIMEOUT
#define lpsolve_LpSolve_TIMEOUT 7L
#undef lpsolve_LpSolve_RUNNING
#define lpsolve_LpSolve_RUNNING 8L
#undef lpsolve_LpSolve_PRESOLVED
#define lpsolve_LpSolve_PRESOLVED 9L
#undef lpsolve_LpSolve_PROCFAIL
#define lpsolve_LpSolve_PROCFAIL 10L
#undef lpsolve_LpSolve_PROCBREAK
#define lpsolve_LpSolve_PROCBREAK 11L
#undef lpsolve_LpSolve_FEASFOUND
#define lpsolve_LpSolve_FEASFOUND 12L
#undef lpsolve_LpSolve_NOFEASFOUND
#define lpsolve_LpSolve_NOFEASFOUND 13L
/* Inaccessible static: lpMap */
/*
 * Class:     lpsolve_LpSolve
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_init
  (JNIEnv *, jclass);

/*
 * Class:     lpsolve_LpSolve
 * Method:    makeLp
 * Signature: (II)Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_makeLp
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readLp
 * Signature: (Ljava/lang/String;ILjava/lang/String;)Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_readLp
  (JNIEnv *, jclass, jstring, jint, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readMps
 * Signature: (Ljava/lang/String;I)Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_readMps
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readFreeMps
 * Signature: (Ljava/lang/String;I)Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_readFreeMps
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readXLI
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_readXLI
  (JNIEnv *, jclass, jstring, jstring, jstring, jstring, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    lpSolveVersion
 * Signature: ()Llpsolve/VersionInfo;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_lpSolveVersion
  (JNIEnv *, jclass);

/*
 * Class:     lpsolve_LpSolve
 * Method:    copyLp
 * Signature: ()Llpsolve/LpSolve;
 */
JNIEXPORT jobject JNICALL Java_lpsolve_LpSolve_copyLp
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    resizeLp
 * Signature:
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_resizeLp
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setLpName
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setLpName
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getLpName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getLpName
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addConstraint
 * Signature: ([DID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addConstraint
  (JNIEnv *, jobject, jdoubleArray, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    strAddConstraint
 * Signature: (Ljava/lang/String;ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_strAddConstraint
  (JNIEnv *, jobject, jstring, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addConstraintex
 * Signature: (I[D[IID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addConstraintex
  (JNIEnv *, jobject, jint, jdoubleArray, jintArray, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    delConstraint
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_delConstraint
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isConstrType
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isConstrType
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addLagCon
 * Signature: ([DID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addLagCon
  (JNIEnv *, jobject, jdoubleArray, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    strAddLagCon
 * Signature: (Ljava/lang/String;ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_strAddLagCon
  (JNIEnv *, jobject, jstring, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addColumn
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addColumn
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addColumnex
 * Signature: (I[D[I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addColumnex
  (JNIEnv *, jobject, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    strAddColumn
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_strAddColumn
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    delColumn
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_delColumn
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRow
 * Signature: (I[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRow
  (JNIEnv *, jobject, jint, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRowex
 * Signature: (II[D[I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRowex
  (JNIEnv *, jobject, jint, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setColumn
 * Signature: (I[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setColumn
  (JNIEnv *, jobject, jint, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setColumnex
 * Signature: (II[D[I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setColumnex
  (JNIEnv *, jobject, jint, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    columnInLp
 * Signature: ([D)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_columnInLp
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRowName
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRowName
  (JNIEnv *, jobject, jint, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getRowName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getRowName
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getOrigrowName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getOrigrowName
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setColName
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setColName
  (JNIEnv *, jobject, jint, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getColName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getColName
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getOrigcolName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getOrigcolName
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRhVec
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRhVec
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    strSetRhVec
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_strSetRhVec
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRh
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRh
  (JNIEnv *, jobject, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getRh
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getRh
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setConstrType
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setConstrType
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getConstrType
 * Signature: (I)S
 */
JNIEXPORT jshort JNICALL Java_lpsolve_LpSolve_getConstrType
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    addSOS
 * Signature: (Ljava/lang/String;III[I[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_addSOS
  (JNIEnv *, jobject, jstring, jint, jint, jint, jintArray, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isSOSVar
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isSOSVar
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setObjFn
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setObjFn
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    strSetObjFn
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_strSetObjFn
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setObjFnex
 * Signature: (I[D[I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setObjFnex
  (JNIEnv *, jobject, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setObj
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setObj
  (JNIEnv *, jobject, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setMat
 * Signature: (IID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setMat
  (JNIEnv *, jobject, jint, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getMat
 * Signature: (II)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getMat
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getRow
 * Signature: (I[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getRow
  (JNIEnv *, jobject, jint, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getRowex
 * Signature: (I[D[I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getRowex
  (JNIEnv *, jobject, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrRow
 * Signature: (I)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrRow
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getColumn
 * Signature: (I[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getColumn
  (JNIEnv *, jobject, jint, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getColumnex
 * Signature: (I[D[I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getColumnex
  (JNIEnv *, jobject, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrColumn
 * Signature: (I)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrColumn
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setMaxim
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setMaxim
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setMinim
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setMinim
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setSense
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setSense
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isMaxim
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isMaxim
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setLowbo
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setLowbo
  (JNIEnv *, jobject, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getLowbo
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getLowbo
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setUpbo
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setUpbo
  (JNIEnv *, jobject, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getUpbo
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getUpbo
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setUnbounded
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setUnbounded
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isUnbounded
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isUnbounded
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isNegative
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isNegative
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBounds
 * Signature: (IDD)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBounds
  (JNIEnv *, jobject, jint, jdouble, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBoundsTighter
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBoundsTighter
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBoundsTighter
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_getBoundsTighter
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setRhRange
 * Signature: (ID)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setRhRange
  (JNIEnv *, jobject, jint, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getRhRange
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getRhRange
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setInt
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setInt
  (JNIEnv *, jobject, jint, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isInt
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isInt
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBinary
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBinary
  (JNIEnv *, jobject, jint, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isBinary
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isBinary
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setSemicont
 * Signature: (IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setSemicont
  (JNIEnv *, jobject, jint, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isSemicont
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isSemicont
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setInfinite
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setInfinite
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getInfinite
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getInfinite
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isInfinite
 * Signature: (D)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isInfinite
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpsint
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpsint
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpsint
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpsint
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpsb
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpsb
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpsb
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpsb
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpsd
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpsd
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpsd
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpsd
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpsel
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpsel
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpsel
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpsel
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpspivot
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpspivot
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpspivot
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpspivot
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpsperturb
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpsperturb
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getEpsperturb
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getEpsperturb
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setEpslevel
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setEpslevel
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getStatus
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getStatus
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setMipGap
 * Signature: (ZD)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setMipGap
  (JNIEnv *, jobject, jboolean, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getMipGap
 * Signature: (Z)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getMipGap
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setVerbose
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setVerbose
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVerbose
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getVerbose
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setTimeout
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setTimeout
  (JNIEnv *, jobject, jlong);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getTimeout
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_lpsolve_LpSolve_getTimeout
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    timeElapsed
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_timeElapsed
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setPrintSol
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setPrintSol
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPrintSol
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getPrintSol
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setDebug
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setDebug
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isDebug
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isDebug
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setTrace
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setTrace
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isTrace
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isTrace
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setLagTrace
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setLagTrace
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isLagTrace
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isLagTrace
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setAddRowmode
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_setAddRowmode
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isAddRowmode
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isAddRowmode
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setAntiDegen
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setAntiDegen
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isAntiDegen
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isAntiDegen
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getAntiDegen
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getAntiDegen
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setPresolve
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setPresolve
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isPresolve
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isPresolve
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPresolve
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getPresolve
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPresolveloops
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getPresolveloops
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setMaxpivot
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setMaxpivot
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getMaxpivot
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getMaxpivot
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBbRule
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBbRule
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBbRule
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getBbRule
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBbDepthlimit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBbDepthlimit
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBbDepthlimit
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getBbDepthlimit
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSolutioncount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getSolutioncount
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setSolutionlimit
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setSolutionlimit
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSolutionlimit
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getSolutionlimit
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setObjBound
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setObjBound
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getObjBound
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getObjBound
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBbFloorfirst
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBbFloorfirst
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBbFloorfirst
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getBbFloorfirst
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setVarBranch
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setVarBranch
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVarBranch
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getVarBranch
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setVarWeights
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setVarWeights
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVarPriority
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getVarPriority
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBreakAtFirst
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBreakAtFirst
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isBreakAtFirst
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isBreakAtFirst
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBreakAtValue
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBreakAtValue
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBreakAtValue
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getBreakAtValue
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setScaling
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setScaling
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getScaling
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getScaling
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isScalemode
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isScalemode
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isScaletype
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isScaletype
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isIntegerscaling
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isIntegerscaling
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setScalelimit
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setScalelimit
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getScalelimit
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getScalelimit
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setImprove
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setImprove
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getImprove
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getImprove
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setPivoting
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setPivoting
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPivoting
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getPivoting
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isPivMode
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isPivMode
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isPivRule
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isPivRule
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setPreferdual
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setPreferdual
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setSimplextype
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setSimplextype
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSimplextype
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getSimplextype
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setNegrange
 * Signature: (D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setNegrange
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNegrange
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getNegrange
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getTotalIter
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_lpsolve_LpSolve_getTotalIter
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getMaxLevel
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getMaxLevel
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getTotalNodes
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_lpsolve_LpSolve_getTotalNodes
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNrows
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNrows
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNorigRows
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNorigRows
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getLrows
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getLrows
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNcolumns
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNcolumns
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNorigColumns
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNorigColumns
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNonzeros
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNonzeros
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getOrigIndex
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getOrigIndex
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getLpIndex
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getLpIndex
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBasis
 * Signature: ([IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBasis
  (JNIEnv *, jobject, jintArray, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBasis
 * Signature: ([IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getBasis
  (JNIEnv *, jobject, jintArray, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    guessBasis
 * Signature: ([IZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_guessBasis
  (JNIEnv *, jobject, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    resetBasis
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_resetBasis
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    defaultBasis
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_defaultBasis
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBasiscrash
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBasiscrash
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getBasiscrash
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getBasiscrash
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    unscale
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_unscale
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBFP
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setBFP
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isNativeBFP
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isNativeBFP
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    hasBFP
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_hasBFP
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    solve
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_solve
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getStatustext
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_getStatustext
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isFeasible
 * Signature: ([DD)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isFeasible
  (JNIEnv *, jobject, jdoubleArray, jdouble);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getObjective
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getObjective
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getWorkingObjective
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getWorkingObjective
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVariables
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getVariables
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrVariables
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrVariables
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getConstraints
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getConstraints
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrConstraints
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrConstraints
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPrimalSolution
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getPrimalSolution
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrPrimalSolution
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrPrimalSolution
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVarPrimalresult
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getVarPrimalresult
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSensitivityRhs
 * Signature: ([D[D[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getSensitivityRhs
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrSensitivityRhs
 * Signature: ()[[D
 */
JNIEXPORT jobjectArray JNICALL Java_lpsolve_LpSolve_getPtrSensitivityRhs
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getDualSolution
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getDualSolution
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrDualSolution
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrDualSolution
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getVarDualresult
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getVarDualresult
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSensitivityObj
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getSensitivityObj
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrSensitivityObj
 * Signature: ()[[D
 */
JNIEXPORT jobjectArray JNICALL Java_lpsolve_LpSolve_getPtrSensitivityObj
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getSensitivityObjex
 * Signature: ([D[D[D[D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getSensitivityObjex
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrSensitivityObjex
 * Signature: ()[[D
 */
JNIEXPORT jobjectArray JNICALL Java_lpsolve_LpSolve_getPtrSensitivityObjex
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getLambda
 * Signature: ([D)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_getLambda
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getPtrLambda
 * Signature: ()[D
 */
JNIEXPORT jdoubleArray JNICALL Java_lpsolve_LpSolve_getPtrLambda
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    deleteLp
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_deleteLp
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeLp
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeLp
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeMps
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeMps
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeFreeMps
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeFreeMps
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readBasis
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lpsolve_LpSolve_readBasis
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeBasis
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeBasis
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    readParams
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_readParams
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeParams
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeParams
  (JNIEnv *, jobject, jstring, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    resetParams
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_resetParams
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printLp
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printLp
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printConstraints
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printConstraints
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printDuals
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printDuals
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printScales
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printScales
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printTableau
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printTableau
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printObjective
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printObjective
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printSolution
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printSolution
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printStr
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printStr
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setOutputfile
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setOutputfile
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    printDebugdump
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_printDebugdump
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setXLI
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setXLI
  (JNIEnv *, jobject, jstring);

/*
 * Class:     lpsolve_LpSolve
 * Method:    writeXLI
 * Signature: (Ljava/lang/String;Ljava/lang/String;Z)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_writeXLI
  (JNIEnv *, jobject, jstring, jstring, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    hasXLI
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_hasXLI
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isNativeXLI
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isNativeXLI
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getNameindex
 * Signature: (Ljava/lang/String;Z)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_getNameindex
  (JNIEnv *, jobject, jstring, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    dualizeLp
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_dualizeLp
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    isUseNames
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_lpsolve_LpSolve_isUseNames
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setUseNames
 * Signature: (ZZ)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_setUseNames
  (JNIEnv *, jobject, jboolean, jboolean);

/*
 * Class:     lpsolve_LpSolve
 * Method:    getConstrValue
 * Signature: (II[D[I)D
 */
JNIEXPORT jdouble JNICALL Java_lpsolve_LpSolve_getConstrValue
  (JNIEnv *, jobject, jint, jint, jdoubleArray, jintArray);

/*
 * Class:     lpsolve_LpSolve
 * Method:    setBasisvar
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_lpsolve_LpSolve_setBasisvar
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    registerAbortfunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_registerAbortfunc
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    registerLogfunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_registerLogfunc
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    registerMsgfunc
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_registerMsgfunc
  (JNIEnv *, jobject, jint);

/*
 * Class:     lpsolve_LpSolve
 * Method:    registerBbBranchfunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_registerBbBranchfunc
  (JNIEnv *, jobject);

/*
 * Class:     lpsolve_LpSolve
 * Method:    registerBbNodefunc
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lpsolve_LpSolve_registerBbNodefunc
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
