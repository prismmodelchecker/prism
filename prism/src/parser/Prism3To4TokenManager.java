/* Prism3To4TokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Prism3To4TokenManager.java */
package parser;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class Prism3To4TokenManager implements Prism3To4Constants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1c3c5fabff78L) != 0L)
         {
            jjmatchedKind = 78;
            return 23;
         }
         if ((active0 & 0x23c3a0540080L) != 0L)
            return 23;
         if ((active1 & 0x40L) != 0L)
            return 1;
         if ((active0 & 0x40000000000000L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x1cfddfabff78L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
            return 23;
         }
         return -1;
      case 2:
         if ((active0 & 0x1cfdd12bff78L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
            return 23;
         }
         if ((active0 & 0xe800000L) != 0L)
            return 23;
         return -1;
      case 3:
         if ((active0 & 0xc205109fd10L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 3;
            }
            return 23;
         }
         if ((active0 & 0x10dd80220268L) != 0L)
            return 23;
         return -1;
      case 4:
         if ((active0 & 0xc2450093d00L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
            return 23;
         }
         if ((active0 & 0x100c010L) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0x42440013c00L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
            return 23;
         }
         if ((active0 & 0x80010080100L) != 0L)
            return 23;
         return -1;
      case 6:
         if ((active0 & 0x2000010400L) != 0L)
            return 23;
         if ((active0 & 0x40440003800L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 23;
         }
         return -1;
      case 7:
         if ((active0 & 0x40440003800L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 23;
         }
         return -1;
      case 8:
         if ((active0 & 0x2800L) != 0L)
            return 23;
         if ((active0 & 0x40440001000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 8;
            return 23;
         }
         return -1;
      case 9:
         if ((active0 & 0x440000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
            return 23;
         }
         if ((active0 & 0x40000001000L) != 0L)
            return 23;
         return -1;
      case 10:
         if ((active0 & 0x440000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 10;
            return 23;
         }
         return -1;
      case 11:
         if ((active0 & 0x440000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 11;
            return 23;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000000L) != 0L)
            return 23;
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 12;
            return 23;
         }
         return -1;
      case 13:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 13;
            return 23;
         }
         return -1;
      case 14:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 14;
            return 23;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 74);
      case 38:
         return jjStopAtPos(0, 47);
      case 39:
         return jjStopAtPos(0, 71);
      case 40:
         return jjStopAtPos(0, 55);
      case 41:
         return jjStopAtPos(0, 56);
      case 42:
         return jjStopAtPos(0, 69);
      case 43:
         return jjStopAtPos(0, 67);
      case 44:
         return jjStopAtPos(0, 53);
      case 45:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 70, 1);
      case 58:
         return jjStopAtPos(0, 51);
      case 59:
         return jjStopAtPos(0, 52);
      case 60:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x102L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 63:
         return jjStopAtPos(0, 73);
      case 67:
         return jjStartNfaWithStates_0(0, 7, 23);
      case 70:
         return jjStartNfaWithStates_0(0, 18, 23);
      case 71:
         return jjStartNfaWithStates_0(0, 20, 23);
      case 73:
         return jjStartNfaWithStates_0(0, 22, 23);
      case 80:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L);
      case 82:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 83:
         return jjStartNfaWithStates_0(0, 41, 23);
      case 85:
         return jjStartNfaWithStates_0(0, 45, 23);
      case 88:
         return jjStartNfaWithStates_0(0, 29, 23);
      case 91:
         return jjStopAtPos(0, 57);
      case 93:
         return jjStopAtPos(0, 58);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x70L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3c00L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3c000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xa00000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1e000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 59);
      case 124:
         return jjStopAtPos(0, 48);
      case 125:
         return jjStopAtPos(0, 60);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 46:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 62:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1003004000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000020L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc180000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xa03c00L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x50010118L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100c00000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000240L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10003c00L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8100200020L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x240L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x40020010L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40c00088008L);
      case 112:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 23);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000100L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 120:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 98:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400080100L);
      case 99:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 23);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 23);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 23);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 108:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 23);
         else if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 23);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10800L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 23);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 23);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x6010L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 120:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 23);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400080000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x80040001000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000100L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 23);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000800L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 23);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 23);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000800L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40001000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40400000000L);
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 23);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 23);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 23);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x440000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 34, 23);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(15, 30, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 76)
                        kind = 76;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(16, 17); }
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAdd(8); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 75)
                        kind = 75;
                  }
                  break;
               case 1:
                  if (curChar == 47)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(4, 6); }
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar == 48 && kind > 75)
                     kind = 75;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAdd(14); }
                  break;
               case 15:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 16:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if (curChar == 35 && kind > 79)
                     kind = 79;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  { jjCheckNAddStates(0, 3); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 39 && kind > 77)
                     kind = 77;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(22); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(7, 9); }
                  break;
               case 2:
                  { jjAddStates(4, 6); }
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(10, 11); }
                  break;
               case 16:
                  { jjAddStates(12, 13); }
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAdd(22); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(4, 6); }
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 18, 2, 3, 5, 20, 21, 22, 13, 14, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\142\157\157\154", "\143\157\156\163\164", 
"\143\145\151\154", "\143\164\155\143", "\103", "\144\157\165\142\154\145", "\144\164\155\143", 
"\145\156\144\151\156\151\164", "\145\156\144\155\157\144\165\154\145", 
"\145\156\144\162\145\167\141\162\144\163", "\145\156\144\163\171\163\164\145\155", "\146\141\154\163\145", 
"\146\154\157\157\162", "\146\157\162\155\165\154\141", "\146\165\156\143", "\106", 
"\147\154\157\142\141\154", "\107", "\151\156\151\164", "\111", "\151\156\164", "\154\141\142\145\154", 
"\155\141\170", "\155\144\160", "\155\151\156", "\155\157\144\165\154\145", "\130", 
"\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", "\120\155\141\170", "\120\155\151\156", "\120", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\162\141\164\145", "\162\145\167\141\162\144\163", 
"\122\155\141\170", "\122\155\151\156", "\122", "\123", 
"\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", "\164\162\165\145", "\125", "\41", "\46", "\174", 
"\75\76", "\55\76", "\72", "\73", "\54", "\56\56", "\50", "\51", "\133", "\135", "\173", 
"\175", "\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\53", "\55", "\52", "\57", 
"\47", "\74\55", "\77", "\42", null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Prism3To4TokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public Prism3To4TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0xffffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[23];
    static private final int[] jjstateSet = new int[2 * 23];

    
    static protected char curChar;
}
