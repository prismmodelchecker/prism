/* PrismParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. PrismParserTokenManager.java */
package parser;
import java.io.*;
import java.util.List;
import java.util.ArrayList;
import jltl2ba.SimpleLTL;
import parser.BooleanUtils;
import parser.ast.*;
import parser.type.*;
import prism.ModelInfo;
import parser.visitor.*;
import prism.ModelType;
import prism.PrismLangException;

/** Token Manager. */
@SuppressWarnings("unused")public class PrismParserTokenManager implements PrismParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc783a04a00908L) != 0L)
            return 31;
         if ((active1 & 0x20000L) != 0L)
            return 1;
         if ((active0 & 0x2000000000000000L) != 0L)
            return 11;
         if ((active0 & 0x387c5fb5ff6f0L) != 0L)
         {
            jjmatchedKind = 88;
            return 31;
         }
         return -1;
      case 1:
         if ((active0 & 0x39fddfb5ff6f0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 31;
         }
         return -1;
      case 2:
         if ((active0 & 0x100e8000000L) != 0L)
            return 31;
         if ((active0 & 0x39edd135ff6f0L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
            return 31;
         }
         return -1;
      case 3:
         if ((active0 & 0x21ad801100490L) != 0L)
            return 31;
         if ((active0 & 0x18405124ff260L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 3;
            }
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0x10020060L) != 0L)
            return 31;
         if ((active0 & 0x18445024df200L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 31;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000100480200L) != 0L)
            return 31;
         if ((active0 & 0x84440205f000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
            return 31;
         }
         return -1;
      case 6:
         if ((active0 & 0x40000041000L) != 0L)
            return 31;
         if ((active0 & 0x80440201e000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
            return 31;
         }
         return -1;
      case 7:
         if ((active0 & 0x80440201e000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 31;
         }
         return -1;
      case 8:
         if ((active0 & 0x2014000L) != 0L)
            return 31;
         if ((active0 & 0x80440000a000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 31;
         }
         return -1;
      case 9:
         if ((active0 & 0x800000008000L) != 0L)
            return 31;
         if ((active0 & 0x4400002000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
            return 31;
         }
         return -1;
      case 10:
         if ((active0 & 0x4400002000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 10;
            return 31;
         }
         return -1;
      case 11:
         if ((active0 & 0x2000L) != 0L)
            return 31;
         if ((active0 & 0x4400000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 11;
            return 31;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000L) != 0L)
            return 31;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 12;
            return 31;
         }
         return -1;
      case 13:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 13;
            return 31;
         }
         return -1;
      case 14:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 14;
            return 31;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 38:
         return jjStopAtPos(0, 53);
      case 39:
         return jjStopAtPos(0, 82);
      case 40:
         return jjStopAtPos(0, 62);
      case 41:
         return jjStopAtPos(0, 63);
      case 42:
         return jjStopAtPos(0, 80);
      case 43:
         return jjStopAtPos(0, 78);
      case 44:
         return jjStopAtPos(0, 60);
      case 45:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 47:
         return jjStartNfaWithStates_0(0, 81, 1);
      case 58:
         return jjStopAtPos(0, 58);
      case 59:
         return jjStopAtPos(0, 59);
      case 60:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x81400L);
      case 61:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2800L);
      case 63:
         return jjStopAtPos(0, 84);
      case 65:
         return jjStartNfaWithStates_0(0, 3, 31);
      case 67:
         return jjStartNfaWithStates_0(0, 8, 31);
      case 69:
         return jjStartNfaWithStates_0(0, 11, 31);
      case 70:
         return jjStartNfaWithStates_0(0, 21, 31);
      case 71:
         return jjStartNfaWithStates_0(0, 23, 31);
      case 73:
         return jjStartNfaWithStates_0(0, 26, 31);
      case 80:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 82:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 83:
         return jjStartNfaWithStates_0(0, 46, 31);
      case 85:
         return jjStartNfaWithStates_0(0, 50, 31);
      case 87:
         return jjStartNfaWithStates_0(0, 51, 31);
      case 88:
         return jjStartNfaWithStates_0(0, 33, 31);
      case 91:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 93:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xe0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x600L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1f000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xb000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1e0000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1c000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 68);
      case 124:
         return jjStopAtPos(0, 54);
      case 125:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 46:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 60:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 61:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 91:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 93:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20030020000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80080000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400020L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x181800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xb01f000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x500040250L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200c000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x810000000480L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x10001f000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x101001000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x480L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x400100040L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x80c000400030L);
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 31);
         break;
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000200L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 120:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40002000000L);
      case 98:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000400200L);
      case 99:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 31);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 31);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000020L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 31);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 31);
         break;
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 31);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 31);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x30040L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000080000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 120:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 31);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000400000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400088000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 107:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 31);
         break;
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000200L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x40002000000L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 31);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000004000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 31);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 31);
         break;
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 31);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x200a000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000004000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000a000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x804000002000L);
      case 109:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000L);
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 31);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x400002000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4400000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 13, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 38, 31);
         break;
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(15, 34, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAdd(22); }
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddStates(0, 3); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(4, 7); }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(16, 17); }
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(8); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 85)
                        kind = 85;
                  }
                  break;
               case 1:
                  if (curChar != 47)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(8); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(8); }
                  break;
               case 9:
                  if (curChar == 48 && kind > 85)
                     kind = 85;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(14); }
                  break;
               case 15:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 16:
                  if ((0xfffffff7ffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if (curChar == 35 && kind > 91)
                     kind = 91;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddStates(0, 3); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 39 && kind > 87)
                     kind = 87;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if (curChar == 34)
                     { jjCheckNAddStates(4, 7); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               case 26:
                  if (curChar == 34 && kind > 89)
                     kind = 89;
                  break;
               case 28:
                  { jjCheckNAddStates(13, 15); }
                  break;
               case 29:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               case 30:
                  if (curChar == 34 && kind > 90)
                     kind = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAdd(22); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(16, 18); }
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(8, 10); }
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(19, 20); }
                  break;
               case 16:
                  { jjAddStates(21, 22); }
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(22); }
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 27:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  { jjCheckNAddStates(13, 15); }
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(13, 15); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjAddStates(8, 10); }
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(21, 22); }
                  break;
               case 28:
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(13, 15); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 12, 18, 24, 27, 29, 30, 2, 3, 5, 25, 26, 27, 29, 30, 
   20, 21, 22, 13, 14, 16, 17, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\101", "\142\157\157\154", "\143\154\157\143\153", 
"\143\157\156\163\164", "\143\164\155\143", "\103", "\144\157\165\142\154\145", "\144\164\155\143", 
"\105", "\145\156\144\151\156\151\164", 
"\145\156\144\151\156\166\141\162\151\141\156\164", "\145\156\144\155\157\144\165\154\145", 
"\145\156\144\162\145\167\141\162\144\163", "\145\156\144\163\171\163\164\145\155", "\146\141\154\163\145", 
"\146\157\162\155\165\154\141", "\146\151\154\164\145\162", "\146\165\156\143", "\106", 
"\147\154\157\142\141\154", "\107", "\151\156\151\164", "\151\156\166\141\162\151\141\156\164", "\111", 
"\151\156\164", "\154\141\142\145\154", "\155\141\170", "\155\144\160", "\155\151\156", 
"\155\157\144\165\154\145", "\130", "\156\157\156\144\145\164\145\162\155\151\156\151\163\164\151\143", 
"\120\155\141\170", "\120\155\151\156", "\120", 
"\160\162\157\142\141\142\151\154\151\163\164\151\143", "\160\162\157\142", "\160\164\141", "\162\141\164\145", 
"\162\145\167\141\162\144\163", "\122\155\141\170", "\122\155\151\156", "\122", "\123", 
"\163\164\157\143\150\141\163\164\151\143", "\163\171\163\164\145\155", "\164\162\165\145", "\125", "\127", "\41", "\46", 
"\174", "\75\76", "\74\75\76", "\55\76", "\72", "\73", "\54", "\56\56", "\50", "\51", 
"\133", "\135", "\133\133", "\135\135", "\173", "\175", "\75", "\41\75", "\74", "\76", 
"\74\74", "\76\76", "\74\75", "\76\75", "\53", "\55", "\52", "\57", "\47", "\74\55", 
"\77", null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 92)
   {
      jjmatchedKind = 92;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PrismParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public PrismParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 31; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff9L, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[31];
    static private final int[] jjstateSet = new int[2 * 31];

    
    static protected char curChar;
}
