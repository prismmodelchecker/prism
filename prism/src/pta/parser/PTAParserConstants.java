/* Generated By:JavaCC: Do not edit this line. PTAParserConstants.java */
package pta.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PTAParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int COMMENT = 2;
  /** RegularExpression Id. */
  int INIT = 3;
  /** RegularExpression Id. */
  int NODE = 4;
  /** RegularExpression Id. */
  int NULL = 5;
  /** RegularExpression Id. */
  int TRAN = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int OR = 10;
  /** RegularExpression Id. */
  int IMPLIES = 11;
  /** RegularExpression Id. */
  int RARROW = 12;
  /** RegularExpression Id. */
  int COLON = 13;
  /** RegularExpression Id. */
  int SEMICOLON = 14;
  /** RegularExpression Id. */
  int COMMA = 15;
  /** RegularExpression Id. */
  int DOTS = 16;
  /** RegularExpression Id. */
  int LPARENTH = 17;
  /** RegularExpression Id. */
  int RPARENTH = 18;
  /** RegularExpression Id. */
  int LBRACKET = 19;
  /** RegularExpression Id. */
  int RBRACKET = 20;
  /** RegularExpression Id. */
  int LBRACE = 21;
  /** RegularExpression Id. */
  int RBRACE = 22;
  /** RegularExpression Id. */
  int EQ = 23;
  /** RegularExpression Id. */
  int NE = 24;
  /** RegularExpression Id. */
  int LT = 25;
  /** RegularExpression Id. */
  int GT = 26;
  /** RegularExpression Id. */
  int LE = 27;
  /** RegularExpression Id. */
  int GE = 28;
  /** RegularExpression Id. */
  int PLUS = 29;
  /** RegularExpression Id. */
  int MINUS = 30;
  /** RegularExpression Id. */
  int TIMES = 31;
  /** RegularExpression Id. */
  int DIVIDE = 32;
  /** RegularExpression Id. */
  int PRIME = 33;
  /** RegularExpression Id. */
  int RENAME = 34;
  /** RegularExpression Id. */
  int QMARK = 35;
  /** RegularExpression Id. */
  int DQUOTE = 36;
  /** RegularExpression Id. */
  int REG_INT = 37;
  /** RegularExpression Id. */
  int REG_DOUBLE = 38;
  /** RegularExpression Id. */
  int REG_IDENTPRIME = 39;
  /** RegularExpression Id. */
  int REG_IDENT = 40;
  /** RegularExpression Id. */
  int LEXICAL_ERROR = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<COMMENT>",
    "\"init\"",
    "\"node\"",
    "\"null\"",
    "\"tran\"",
    "\"true\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"=>\"",
    "\"->\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"..\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\\'\"",
    "\"<-\"",
    "\"?\"",
    "\"\\\"\"",
    "<REG_INT>",
    "<REG_DOUBLE>",
    "<REG_IDENTPRIME>",
    "<REG_IDENT>",
    "<LEXICAL_ERROR>",
  };

}
